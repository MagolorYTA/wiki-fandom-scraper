import requests
import mwparserfromhell
import json

# Helper function to recursively parse and resolve nested templates
def resolve_nested_templates(value, wikicode):
    if "{{" in value and "}}" in value:
        # Parse the nested template
        nested_code = mwparserfromhell.parse(value)
        resolved_data = {}
        for template in nested_code.filter_templates():
            template_name = str(template.name).strip()
            template_data = {}
            for param in template.params:
                key = str(param.name).strip()
                value = str(param.value).strip()
                template_data[key] = value
            resolved_data[template_name] = template_data
        return resolved_data
    return value  # If no nested template, return the original value

# Original URL
url = "https://onepiece.fandom.com/wiki/Battaman"

# Transform to API URL
title = url.split("/")[-1]
api_url = f"https://onepiece.fandom.com/api.php?action=query&prop=revisions&titles={title}&rvprop=content&format=json"

print(api_url)

# Get JSON Response
response = requests.get(api_url)
data = response.json()

# Navigate to the specific content and parse it
try:
    pages = data['query']['pages']
    for page_id, page_content in pages.items():
        if 'revisions' in page_content:
            # Extract the `*` field from the first revision
            content = page_content['revisions'][0]['*']

            # Parse the MediaWiki content
            wikicode = mwparserfromhell.parse(content)

            # Extract templates into JSON-friendly format
            templates_data = {}
            for template in wikicode.filter_templates():
                template_name = str(template.name).strip()
                template_data = {}
                for param in template.params:
                    key = str(param.name).strip()
                    value = str(param.value).strip()
                    # Resolve nested templates
                    template_data[key] = resolve_nested_templates(value, wikicode)
                templates_data[template_name] = template_data

            # Extract plain text sections
            sections_data = {}
            for heading in wikicode.get_sections(include_lead=True, flat=True):
                section_title = heading.filter_headings()[0].title.strip() if heading.filter_headings() else "Lead"
                sections_data[section_title] = heading.strip_code()

            # Combine everything into a single JSON structure
            parsed_output = {
                "templates": templates_data,
                "sections": sections_data,
            }

            # Convert to JSON and print
            json_output = json.dumps(parsed_output, indent=4, ensure_ascii=False)
            # Save to a file
            with open("parsed_output.json", "w", encoding="utf-8") as json_file:
                json_file.write(json_output)

        else:
            print(f"No revisions found for page {page_id}")
except KeyError as e:
    print(f"KeyError: {e}")
